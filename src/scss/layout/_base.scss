/**
 * !!! 変数の定義 !!!
 * 変数は作りすぎず、デザインコンポーネント、もしくはシンボルを元に作成する
 * またGoogle Font等の特殊なウェブフォントの場合、そのフォント名を定義してわかりやすくする
 */
$gothic: "游ゴシック",
YuGothic,
"Hiragino Sans",
"ヒラギノ角ゴ Pro",
"Hiragino Kaku Gothic Pro",
"メイリオ",
"Meiryo",
sans-serif;
$serif: "游明朝",
YuMincho,
"ヒラギノ明朝 ProN W3",
"Hiragino Mincho ProN",
"HG明朝E",
"ＭＳ Ｐ明朝",
serif;

$noto: 'Noto Sans JP', sans-serif;
$yakuhan: YakuHanJP, "Hiragino Sans", "Hiragino Kaku Gothic ProN", "Noto Sans JP", Meiryo, sans-serif;
$proxima: "proxima-nova", sans-serif;


/**
 * !!! ブレークポイント !!!
 */
@mixin PC {
  @include min-screen(1080px) {
    @content;
  }
}

@mixin SP {
  @include max-screen(1079px) {
    @content;
  }
}

.pc {
  @include SP {
    display: none !important;
  }
}

.sp {
  @include PC {
    display: none !important;
  }
}


::-webkit-scrollbar {
  display: none;
  -webkit-appearance: none;
}

/**
 * !!! browsersyncのアラートを非表示 !!!
 */
#__bs_notify__ {
  display: none !important;
}


/**
 * !!! ページCSS基本設定 !!!
 * 基本的にこの箇所は操作しないようにする
 * ----------------ここから----------------
 */
html {
  font-size: 62.5%;
  font-family: $noto;

  // color: #292929;
  // font-feature-settings: "palt";
  // -webkit-font-smoothing: antialiased;

  // opacity: 0;

  // &.wf-active {
  //   opacity: 1;
  // }

}

* {
  @include font-size(14);
  box-sizing: border-box;
}

img {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}

a {
  color: inherit;
  text-decoration: none;
  transition: opacity .3s ease;
  @include SP {
    transition: opacity .3s;
  }
  &:hover {
    opacity: 0.7;
    @include SP {
      opacity: 1;
    }
  }
}

input,
button,
select,
textarea {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: transparent;
  border: none;
  border-radius: 0;
  font: inherit;
  outline: none;
}

textarea {
  resize: vertical;
}

input[type='checkbox'],
input[type='radio'] {
  display: none;
}

input[type='submit'],
input[type='button'],
label,
button,
select {
  cursor: pointer;
}

select::-ms-expand {
  display: none;
}

.row {
  @include clearfix;
}

/**
 * ----------------ここまで----------------
 */


/**
 * !!! FlexBox Rule !!!
 * 都度scssを記載するのではなく、クラスで定義し、クラスの付け外しで管理すること。
 */


@mixin flex-row() {
  display: -webkit-flex;
  display: flex;
  -webkit-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-justify-content: space-between;
  justify-content: space-between;
}

.flex-row {
  @include flex-row;
}


/**
 * !!! Inner Rule !!!
 * 最初にデザインを確認し、存在するinnerパターンを作成すること
 * max-width指定のみだと、画面幅を縮小するときに余白が消えるため、paddingをつけること
 * 例) innerが1000pxであれば、
 *     max-width: 1060px;
 *     padding: 0 30px;
 */

.inner {
  // max-width: 1160px;
  max-width: 1360px;
  padding: 0 40px;
  margin: 0 auto;
  @include SP {
    padding: 0 48px;
  }
  @include max-screen(768px){
    padding: 0 16px;
  }
}

[data-trigger] {
  position: relative;
  // top: 60px;
  // @include transition(top 1s, opacity 1s);
  top: 40px;
  @include transition(top 0.6s, opacity 0.6s);
  opacity: 0;

  &.visible {
    top: 0;
    opacity: 1;
  }
}

body {
  // background: #090709;
  background: #000;
  color: #FCFAF2;
  &.fixed {
    overflow: hidden;
  }
}

main {
  opacity: 0;
  transition: opacity 1.2s;
  &.active {
    opacity: 1;
  }
  @include SP {
    overflow: hidden;
  }
  > section {
    transform: translate(0, 40px);
    transition: transform 1s, opacity 1.2s;
    &.active {
      transform: translate(0);
    }
  }
}


// .inner-large {
// }
// .inner-medium {
// }
// .inner-small {
// }